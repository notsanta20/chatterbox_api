generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DATABASE_URL")
}

model Users {
  id               String         @id @default(uuid())
  username         String
  salt             String
  hash             String
  profile          String?
  bio              String?
  senderMessages   Messages[]     @relation("senderId")
  receiverMessages Messages[]     @relation("receiverId")
  Members          GroupMembers[]
  owner            Contacts[]     @relation("owner")
  contacts         Contacts[]     @relation("contact")
}

model Messages {
  id         String   @id @default(uuid())
  message    String?
  imageURL   String?
  sender     Users    @relation("senderId", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   Users?   @relation("receiverId", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String?
  time       DateTime @default(now())
  group      Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    String?
}

model Group {
  id       String         @id @default(uuid())
  name     String
  profile  String?
  Messages Messages[]
  Members  GroupMembers[]
}

model GroupMembers {
  id      String @id @default(uuid())
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId  String
  user    Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contacts {
  id        String @id @default(uuid())
  userId    String
  user      Users  @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  contactId String
  contact   Users  @relation("contact", fields: [contactId], references: [id], onDelete: Cascade)
}
